// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  generations   Generation[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Generation {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Исходные данные
  userPhoto   String   // Base64 или URL исходного фото пользователя
  clothingPhotos String // JSON строка с массивом URL фотографий одежды
  
  // Результат генерации
  generatedImage String // Base64 или URL сгенерированного изображения
  prompt        String // Промпт, использованный для генерации
  scene         String? // Сцена/окружение
  
  // Метаданные
  quality      Int?    // Оценка качества (1-5)
  feedback     String? // Отзыв пользователя
  isPublic     Boolean @default(false) // Публичная ли генерация
  
  // Техническая информация
  model        String? // Модель ИИ (gemini, dall-e, etc.)
  processingTime Int?  // Время обработки в миллисекундах
  tokensUsed   Int?    // Количество токенов использовано
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@index([userId])
  @@index([createdAt])
  @@index([isPublic])
}
